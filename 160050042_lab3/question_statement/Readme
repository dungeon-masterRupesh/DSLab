CS 293
Data Structures and Algorithms Lab
Autumn 2017


Lab 3. 7.8.17
-----

This lab will concern itself with the linked-list data structure.
A linked-list is an important data structure to store data elements
in a dynamic manner, especially when the number of elements is not known.
An example of a linked list in the real world -- you are using one as you 
read this, the list of all processes on a Linux operating system is stored
as a linked list!

In this lab, we will implement a LinkedList class which stores information
about a list of items.

The following need to be implemented as part of this lab.

- A template class that is capable of creating LinkedList objects to store
a list of items of different types. (for instance int,float,double,char)

The class should support the following operations:
(Let the data type of stored value in our templatized class be T)

-- LinkedList() (constructor call)
    Just set the head to NULL
-- ~LinkedList() (destructor call)
    free the memory allocated on the heap during construction of the linked list

(i) insertEnd(val) [Return type void]     
    
    - insert a value val in the linked-list at the end.
    - If the linked-list is empty, create a node with the given value val 
      and make it the head of the linked list.
    - For example, let the initial linked list be 1->2->3.
      If we call inserEnd(5), the linked list becomes 1->2->3->5.
          
(ii) insertAtInd(ind,val) [Return type bool]     
    
    - insert a value val in the linked-list at the index ind. (NOTE that indexing is 0-based)
    - For example, let the initial linked list be 1->2->3.
      If we call inserAtInd(1,4), the linked list becomes 1->4->2->3.
      The return value is set to true because the insertion is successful.
    - If the linked-list is empty, just return false. 
    - Else let the length of linked list be x.
      --  If the ind is greater than x-1 or less than 0 just return false.
      --  Else insert the element at index ind in place and return true.
    [The return boolean just indicates if insertion was successful or not.]

(iii) count() [Return type int]     
    
    - Return the count of number of data elements in the linked list
    - For example, let the linked list be 1->2->3.
      If we call count(), the return value is 3 as there are 3 elements.
    - If the linked-list is empty, just return 0.

(iv) print() [Return type void]     
    
    - Print the value of data items encountered from head till the end in order.
    - For example, let the linked list be 1->2->3.
      If we call print(), you must print 1 2 3 to STDOUT. (space separated, endl at the end of line)
    - If the linked-list is empty, print NULL to STDOUT. (also endl after NULL)

(v) deleteAll(val) [Return type int]

    - delete all data items from the linked list which have the value equal to val
      and return their count
    - For example, let the initial linked list be 1->2->3->2->4.
      If we call deleteAll(2), the linked list becomes 1->3->4 and return 2
      as there are 2 elements with value 2.
    - If the linked list doesn't have any item with value val (or even if list is empty
      for that matter) return 0.
    - If say all the elements in the linked list are of the value val, remove all of them, set
      the head to NULL and return their count. 
    [NOTE: Modify the list in place in addition to returning the count. The complexity of your
    function should be of the order of length of the linked-list.]

(vi) reverse() [Return type void]

    - reverse the linked list in place (also means change the head appropriately)
    - For example, let the initial linked list be 1->2->3. (head at 1)
      If we call reverse(), the linked list becomes 3->2->1 (head at 3) 
    - If list is empty, do nothing.
    
(vii) midValue() [Return type void]

    - Print the value(s) of middle data items.
    - If the linked-list is empty, print NONE to STDOUT. (also endl after NONE)
    - If the length is odd, print the value of the middle data element. (also endl at the end of line)
    - Else if the length is even, print values of both data items which are middle
      in order from left. (space separated, endl at the end of line)
    - For example, let the linked list be 1->2->3->4->5.
      Then print 3 to STDOUT as its middle element.
      If linked list is 1->2->3->4->5->6, print 3 and 4 to STDOUT.
    [Try doing this part without explicitly calculating the lengths and going to 
     corresponding indices !!]

(viii) mergePoint(LinkedList<T> * oth) [Return type void]

    - Find the maximum common suffix (or tail) of both the linked lists.
      And print the values of elements in this maximal suffix from left to right.
    - If the maximal common suffix is empty, NONE to STDOUT. (also endl after NONE)
    - For example, let our linked list be 1->2->3->4->5 and the linked list pointed by
      oth is 8->7->5->2->3->4->5.The maximal common tail is 2->3->4->5.
      So we print 2 3 4 5 to STDOUT. (space separated, endl at the end of line)

- A sample header file (LinkedList.h) with the class declaration and required public member
functions is attached.
[Build upon this to create your header file. Do not modify any signatures already given in 
 these header files, although you may add your own private or public member functions 
 as required by you.]

- Also attached are sample input and output files(under the testcases directory) and a README 
  to specify the format of the input/output files.
- You need to implement the functions of class in the LinkedList.cpp file.
- You also need to write your own main file to parse the given input accordingly.The testcases folder
  contains testcases for the data type int. So instantiate a class object of LinkedList as LinkedList<int>
  in your main.cpp file.

SUBMISSION DETAILS :

Submit a tar ball with the name <roll_number_lab3>.tar.gz
The directory structure should be as follows:

-16xxxxxxx_lab3.tar.gz
   |-LinkedList.h
   |-LinkedList.cpp
   |-main.cpp
   
NOTE :

- The exercise test cases do not test all the specified
 functionality, but are meant to test your basic implementations.
 Separate test cases will be used to check actual correctness , handling of 
 corner cases etc.
- To take input from a file (say my.in) use ./a.out < my.in
- To redirect output to a file (say my.out) use ./a.out > my.out
- To find diff between two files a and b run diff a b. (Use diff -Z a b to ignore
   white spaces at line end. See man page of diff for more flags.)


1. Input format 
--------------------

i <space> <val> 
eg., 
i 5
insert 5 to the end of the list.

n <space> <ind> <space> <val> 
eg.,
n 2 5
insert 5 to the list at index 2.
(0-based indexing)

p
print the linked-list data

r
reverse the linked-list in place

d <space> <value to be deleted>
d 5
delete all nodes with value 5

c
count total number of nodes

m
find middle value(s)

q
all input over, quit.

2. Output format
----------------

print
<space separated values of items in linked-list>

count
<count of number of items in linked list>

midValue
<print middle value if length is odd OR space separated values middle values if length is even>
