Given a linked list, write a function to reverse every k nodes (where k is an input to the function).
If k is not a divisor of n, then some (less than k) elements will be left: reverse them too.

Example:
Input:  1->2->3->4->5->6->7->8->NULL and k = 3
Output:  3->2->1->6->5->4->8->7->NULL. 

Input:   1->2->3->4->5->6->7->8->NULL and k = 5
Output:  5->4->3->2->1->8->7->6->NULL. 

Time Complexity: O(n) where n is the number of nodes in the given list.

Space Complexity: O(1), i.e. constant extra space to be used (extra space used must not be a function of the input size)

Detail
	You are given three files (which you do not have to modify at all) from which two contain the LinkedList class implementation in them and one is the main.cpp
	which will test the function which you are supposed to write in p1.cpp.
	The function prototype should be `LinkedList::node* reverse (LinkedList::node *head, int k)`.
	You are free to use any of the other predefined functions declared in the header.

	You are not supposed to handle any STDIN/STDOUT reading/writing, just modify the linked list as required in your function.

FILES TO SUBMIT: p1.cpp

You are also given a sample executable for further exploring the expected output.

STEPS FOR COMPILING AND GENERAL INSTRUCTIONS:
1) Include only the LinkedList.h in your p1.cpp
	`#include "LinkedList.h"`
2) Compilation command: g++ LinkedList.cpp main.cpp p1.cpp -o exe
3) Steps for running a testcase and comparing output.
	./exe < 1_inp_TC-1.txt > 1_yourout_TC-1.txt
	diff 1_yourout_TC-1.txt 1_out_TC-1.txt
If diff returns some output, something's wrong.